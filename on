[0;31mSignature:[0m [0mjson_graph[0m[0;34m.[0m[0mnode_link_graph[0m[0;34m([0m[0mdata[0m[0;34m,[0m [0mdirected[0m[0;34m=[0m[0mFalse[0m[0;34m,[0m [0mmultigraph[0m[0;34m=[0m[0mTrue[0m[0;34m,[0m [0mattrs[0m[0;34m=[0m[0;34m{[0m[0;34m'source'[0m[0;34m:[0m [0;34m'source'[0m[0;34m,[0m [0;34m'target'[0m[0;34m:[0m [0;34m'target'[0m[0;34m,[0m [0;34m'key'[0m[0;34m:[0m [0;34m'key'[0m[0;34m,[0m [0;34m'id'[0m[0;34m:[0m [0;34m'id'[0m[0;34m}[0m[0;34m)[0m[0;34m[0m[0m
[0;31mDocstring:[0m
Return graph from node-link data format.

Parameters
----------
data : dict
    node-link formatted graph data

directed : bool
    If True, and direction not specified in data, return a directed graph.

multigraph : bool
    If True, and multigraph not specified in data, return a multigraph.

attrs : dict
    A dictionary that contains four keys 'id', 'source', 'target' and
    'key'. The corresponding values provide the attribute names for storing
    NetworkX-internal graph data. Default value:
    :samp:`dict(id='id', source='source', target='target', key='key')`.

Returns
-------
G : NetworkX graph
   A NetworkX graph object

Examples
--------
>>> from networkx.readwrite import json_graph
>>> G = nx.Graph([(1,2)])
>>> data = json_graph.node_link_data(G)
>>> H = json_graph.node_link_graph(data)

Notes
-----
The default value of attrs will be changed in a future release of NetworkX.


See Also
--------
node_link_data, adjacency_data, tree_data
[0;31mFile:[0m      /opt/conda/envs/biospytial/lib/python2.7/site-packages/networkx/readwrite/json_graph/node_link.py
[0;31mType:[0m      function
