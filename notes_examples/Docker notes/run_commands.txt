# This notes are for running Docker Containers.

* Docker Pull to retrive an image
## This is to use a downloaded image as a new project.
* Docker tag [container Id] user/branch:version 

## Docker RUn
docker run -i -t user/image bash
-- Means run the bash command interactively from the image user/image -t means to allocate a tty

-d option means to dettach i.e. runs in background


## Mounting data volumes
The -v option multiple times if you're about to mount several volumes.

Example: docker run -d -P --name algo -v /mountingpoint [training/webapp] [python app.py]


## build container named postgis with shared data volume
docker run -i -t -v /home/juan/DataVolumes:/DataVolumes  --name postgis molgor/postgis_biospytial bash


## Run the database postgis in the container
docker run -v /home/juan/DataVolumes:/DataVolumes  -d --name postgis molgor/postgis_biospytial /bin/sh -c "/root/startPostgres" --rm


    
# Create Network    
docker network create biospytial_network    


# Run the Postgis Daemon
## In linux
docker run \
    --name=postgis \
    --net=biospytial_network \
    -d \
    --publish=5432:5432 \
    --volume=/home/juan/DataVolumesBank/postgis:/DataVolumes \
    molgor/postgis_biospytial \
    /bin/sh -c "/root/startPostgres"


## In my mac
docker run \
    --name=postgis \
    --network=biospytial_network \
    -d \
    --rm \
    --publish=5432:5432 \
    --volume=/Users/juan/Biospytial/gbif_data/postgisdata:/DataVolumes \
    molgor/postgis_biospytial \
    /bin/sh -c "/root/startPostgres"



## Initialise database system (only for buiding the files structure)
docker run \
    --name=postgis \
    --net=biospytial_network \
    -d \
    --publish=5432:5432 \
    --volume=/home/juan/DataVolumesBank/postgis:/DataVolumes \
    molgor/postgis_biospytial \
    /bin/sh -c "bash INITIALISATION_NOTES"

 
    
    
## CONSOLE INTERACTIVE For Linux
docker run \
    --name=postgis \
    --net=biospytial_network \
    -it \
    --publish=5432:5432 \
    --volume=/home/juan/DataVolumesBank/postgis:/DataVolumes \
    molgor/postgis_biospytial \
    /bin/bash

## SERVER Interactive shell
docker run \
    --name=postgis \
    --net=biospytial_network \
    -it \
    --publish=5432:5432 \
    --volume=/home/juan/DataVolumesBank/test1:/DataVolumes \
    molgor/postgis_biospytial \
    /bin/bash



    

##Console for OSX
docker run \
    --name=postgis \
    --network=biospytial_network \
    -it \
    --publish=5432:5432 \
    --volume=/Users/juan/Biospytial/gbif_data/postgisdata:/DataVolumes \
    molgor/postgis_biospytial \
    /bin/bash





## Run the docker biospytial
docker run --name biospytial --rm -v /home/juan/RawDataCSV:/RawDataCSV -t -i molgor/biospytial bash


## Biospytial on My Mac with shared repository
docker run \
   --name=biospytial \
   --publish=8000:8000 \
   --rm \
   --volume=/Users/juan/Biospytial/gbif_data/RawDataCSV:/RawDataCSV \
   --volume=/Users/juan/git/biospytial/:/apps \
   --network=biospytial_network \
   -ti molgor/biospytial bash


## Biospytial on Linux with shared repository
docker run \
   --name=biospytial \
   --publish=8000:8000 \
   --rm \
   --volume=/home/juan/RawDataCSV:/RawDataCSV \
   --volume=/home/juan/git-projects/biospytial:/apps \
   --volume=/mnt/data1:/mnt/data1 \
   --net=biospytial_network \
   -ti molgor/biospytial bash

## SERVER Biospytial on Linux with shared repository
docker run \
   --name=biospytial \
   --publish=8000:8000 \
   --rm \
   --volume=/tmp/.X11-unix:/tmp/.X11-unix \
   --env DISPLAY=unix$DISPLAY \
   --volume=/mnt/data1/RawDataCSV:/RawDataCSV \
   --volume=/home/juan/git-projects/biospytial:/apps \
   --volume=/mnt/data1:/mnt/data1 \
   --net=biospytial_network \
   -ti molgor/biospytial bash




## Run Neo4J instance

docker run \
  --name=neo4j \
  --detach \
  --env NEO4J_AUTH=none \
  --rm \
  --publish=7474:7474 \
  --publish=7687:7687 \
  --volume=/Users/juan/Biospytial/gbif_data/neo4j/data:/data \
  --volume=/Users/juan/Biospytial/gbif_data/neo4j/logs:/logs \
  --net=biospytial_network \
  neo4j:3.1
    
## For linux
docker run \
  --name=neo4j \
  --detach \
  --env NEO4J_AUTH=none \
  --publish=7474:7474 \
  --publish=7687:7687 \
  --volume=/home/juan/DataVolumesBank/neo4j/data:/data \
  --volume=/home/juan/DataVolumesBank/neo4j/logs:/logs \
  --net=biospytial_network \
  neo4j:3.1

## SERVER For linux server
docker run \
  --name=neo4j \
  --detach \
  --env NEO4J_AUTH=none \
  --publish=7474:7474 \
  --publish=7687:7687 \
  --volume=/home/juan/DataVolumesBank/neo4j/data:/data \
  --volume=/home/juan/DataVolumesBank/neo4j/logs:/logs \
  --net=biospytial_network \
  neo4j:3.1


#####################################################
##### SWARM EXAMPLES ################################
#####################################################

docker service create \
    --name=postgis \
    --publish=5432:5432 \
    --replicas=1 \
    --mount type=bind,source=/home/juan/DataVolumesBank/postgis,target=/DataVolumes \
    -d \
    molgor/postgis_biospytial \
    /bin/sh -c "/root/startPostgres"

##### To activate Xserver, graphing plotting capabilities in osx container do:

## 1.- Open an XQuartz terminal

## open -a Xquartz

## Get ip addr and add the ip to the xhost

# ip=$(ifconfig en1 | grep inet | awk '$1=="inet" {print $2}')

# xhost + $ip

# Export DISPLAY variable to the ip:0 inside the container

export DISPLAY=[ip]:0













    